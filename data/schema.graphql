input AddLiftMutationInput {
  workout_id: ID!
  name: String!
  reps: Int!
  sets: Int!
  weight: Float!
  clientMutationId: String!
}

type AddLiftMutationPayload {
  newLiftEdge: liftEdge
  workout: Workout
  clientMutationId: String!
}

type Lift implements Node {
  id: ID!
  reps: Int
  sets: Int
  weight: Float
  name: String
  comments: String
  workout_id: ID
}

type liftConnection {
  pageInfo: PageInfo!
  edges: [liftEdge]
}

type liftEdge {
  node: Lift
  cursor: String!
}

type Mutation {
  addLiftMutation(input: AddLiftMutationInput!): AddLiftMutationPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  user(id: ID, email: String): User
  users: [User]
  workout(id: ID!): Workout
  lift(id: ID!): Lift
  node(id: ID!): Node
}

type User implements Node {
  id: ID!
  name: String
  email: String
  profile_pic_url: String
  workouts(after: String, first: Int, before: String, last: Int): WorkoutConnection
}

type Workout implements Node {
  id: ID!
  date: String
  created_at: String
  updated_at: String
  name: String
  comments: String
  lifts(after: String, first: Int, before: String, last: Int): liftConnection
}

type WorkoutConnection {
  pageInfo: PageInfo!
  edges: [WorkoutEdge]
}

type WorkoutEdge {
  node: Workout
  cursor: String!
}
